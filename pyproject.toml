[tool.poetry]
name = "opencompiler"
version = "0.1.0"
description = "OpenCompiler: An AI Compiler Engineering Platform for CPU-Optimized ML Workloads, with Apple Silicon support."
authors = ["The OpenCompiler Team <contact@opencompiler.dev>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/yourusername/opencompiler"
keywords = ["compiler", "opencompiler", "mlir", "llvm", "pytorch", "jax", "onnx", "apple silicon", "m1", "m2", "m3"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Compilers",
]

[tool.poetry.dependencies]
python = ">=3.8,<3.12"
numpy = ">=1.21.0"
torch = {version = ">=2.0.0", optional = true}
llvmlite = ">=0.40.0"
py-cpuinfo = ">=9.0.0"
psutil = ">=5.9.0"

# MLIR Python bindings - versioning can be tricky and often tied to LLVM version
# Ensure this matches your environment or installed LLVM/MLIR tools
# For example, if using LLVM 15, the MLIR package might be tied to that release.
# There isn't a universal "mlir" package on PyPI that works for all setups.
# Users often build this from source or install from specific channels (e.g., conda-forge for specific llvm versions).
# For now, this is a placeholder. If you manage MLIR separately, you might not list it here.
# Consider adding a note in README about MLIR installation.
# mlir = {version = "15.0.0", optional = true} # Example, very specific

jax = {version = ">=0.4.10", optional = true}
jaxlib = {version = ">=0.4.10", optional = true}
onnx = {version = ">=1.14.0", optional = true}
onnxoptimizer = {version = ">=0.3.10", optional = true}

[tool.poetry.extras]
pytorch = ["torch"]
jax = ["jax", "jaxlib"]
onnx = ["onnx", "onnxoptimizer"]
# dev group is preferred over extras for dev dependencies
# full = ["torch", "jax", "jaxlib", "onnx", "onnxoptimizer"]

[tool.poetry.group.dev.dependencies]
pytest = ">=7.0.0"
pytest-cov = ">=4.0.0"
black = {version = ">=23.0.0", extras = ["d"]}
flake8 = ">=6.0.0"
mypy = ">=1.0.0"
isort = ">=5.10.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# If you were to integrate CMake build with Poetry (more advanced):
# requires = ["poetry-core>=1.0.0", "setuptools", "cmake>=3.14"]
# build-backend = "setuptools.build_meta"
# [tool.setuptools.cmake]
# path = "CMakeLists.txt"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true # Can be helpful initially

# If you want to define scripts (CLI entry points)
# [tool.poetry.scripts]
# opencompiler-cli = "aicompiler.cli:main_cli_function" # Example CLI if `aicompiler` package name is kept 